#!/bin/bash
 
# This script prepares an EC2 machine for cgs-batch.
# This script must run as root.

set -x

# make sure the link to the JDK rpm is correct (line 62), as well as the rpm command one line below.
# configure variables below:
home_path=~snicoud
test_or_prod=prod
cgs_path=cgs-batch-destination
logs_path=cgs-batch-bex
splunk_hostname=cgs-ec2-proddest-`hostname`
#

cd ${home_path}

# cleanup cgs-tt-service residues
rm -fr /opt/cgs-tt-service
rm -fr /etc/cron.d/cgs-tt-service-blobs-rotate
service cgs-tt-service stop
chkconfig cgs-tt-service off
chkconfig --del cgs-tt-service
read -p $'\nEdit the crontab to remove the cgs-tt related entries. Press a key to edit. '
crontab -e
echo $'\nps cgs-tt'
ps aux | grep 'cgs-tt'
read -p $'\nEnter cgs-tt PID to kill, or something else when done: ' ttpid
while `echo "$ttpid" | grep -iq "^[1-9]"`
do
    echo "Killing $ttpid"
    kill -9 $ttpid
    echo $'\nps cgs-tt'
    ps aux | grep 'cgs-tt'
    read -p $'\nEnter cgs-tt PID to kill, or something else when done: ' ttpid
done
 
# install secrets
if [ ! -f /opt/expedia/cgs-secrets.properties ]; then
    if [ ! -f secrets.tgz ]; then
        read -p $'\nUpload the secrets.tgz file to your home dir using the scp command. Press a key when done. '
    fi
    [ -f secrets.tgz ] || exit 1;

    tar zxvf secrets.tgz
    mkdir -p /opt/expedia
    if [ "$test_or_prod" = "prod" ]; then
        cp -f cgs-secrets-prod.properties /opt/expedia/cgs-secrets.properties
    else
        cp -f cgs-secrets.properties /opt/expedia/cgs-secrets.properties
    fi
    cp -f kafka_ls.keystore-*.jks /opt/expedia
    cp -f kafka_ls.truststore-*.jks /opt/expedia
fi
 
# install JDK
java -version
read -p $'\nInstall JDK 8 u191? [yes/no*]: ' yn
if echo "$yn" | grep -iq "^y"; then
    wget --no-check-certificate -c --header "Cookie: oraclelicense=accept-securebackup-cookie" https://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.rpm
    rpm -Uvh jdk-8u191-linux-x64.rpm
    alternatives --config java
    java -version
    keytool -import -trustcacerts -storepass changeit -noprompt -keystore /usr/java/latest/jre/lib/security/cacerts -file karmalab.net.pem -alias CA_Expedia
    keytool -import -trustcacerts -storepass changeit -noprompt -keystore /usr/java/latest/jre/lib/security/cacerts -file ExpediaRoot2015.crt -alias ExpediaRoot2015
    keytool -import -trustcacerts -storepass changeit -noprompt -keystore /usr/java/latest/jre/lib/security/cacerts -file Internal2015C1.crt -alias Internal2015C1
fi
 
# ansible deploy cgs-batch from proddeploy to target host
read -p $'\nInstall cgs-batch from another host using the ansible-playbook command. Press a key when done. '
 
chown content.dev /opt/expedia
chown content.dev /opt/expedia/*
chmod 600 /opt/expedia/cgs-secrets.properties
chown content.dev /opt/logs/${logs_path}
chown -R content.dev /opt/logs/${logs_path}/*
 
# install Splunk forwarder
read -p $'\nInstall Splunk forwarder? [yes/no*]: ' yn
if echo "$yn" | grep -iq "^y"; then
    cd ${home_path}
    yum install -y https://download.splunk.com/products/universalforwarder/releases/7.1.1/linux/splunkforwarder-7.1.1-8f0ead9ec3db-linux-2.6-x86_64.rpm
    mkdir -p /opt/splunkforwarder/etc/apps/cgs-batch/default
    mkdir -p /opt/splunkforwarder/etc/apps/cgs-batch/local
 
    cat > /opt/splunkforwarder/etc/apps/cgs-batch/default/inputs.conf <<EOF
[monitor:///opt/logs/${logs_path}/contentgen_out.log]
index = app
sourcetype = cgs-batch
  
[monitor:///opt/logs/${logs_path}/error.log]
index = app
sourcetype = cgs-batch-error
EOF
 
    cat > /opt/splunkforwarder/etc/apps/cgs-batch/local/app.conf <<EOF
[install]
state = enabled
EOF
 
    cat > /opt/splunkforwarder/etc/system/local/deploymentclient.conf <<EOF
[target-broker:deploymentServer]
targetUri = splunk-deployment.us-west-2.test.monitoring.expedia.com:8089
 
[deployment-client]
clientName = `hostname`
EOF
 
    cat > /opt/splunkforwarder/etc/system/local/user-seed.conf <<EOF
[user_info]
USERNAME = cgs
HASHED_PASSWORD = `/opt/splunkforwarder/bin/splunk hash-passwd cgstravel`
EOF
 
    cat > /opt/splunkforwarder/etc/system/local/inputs.conf <<EOF
[default]
host = ${splunk_hostname}
EOF
 
    cat > /etc/init.d/splunkd <<EOF
#!/bin/sh
#
# /etc/init.d/splunkforwarder
# init script for Splunk Forwarder.
# generated by 'splunk enable boot-start'.
#
### BEGIN INIT INFO
# Provides:             splunkforwarder
# Required-Start:       \$all
# Required-Stop:        \$all
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    Splunk Forwarder
# Description:          Splunk Forwarder
### END INIT INFO
 
RETVAL=0
splunk_start() {
  echo Starting Splunk...
  /bin/su splunk -c "/opt/splunkforwarder/bin/splunk start --accept-license --answer-yes"
  RETVAL=\$?
}
splunk_stop() {
  echo Stopping Splunk...
  /bin/su splunk -c "/opt/splunkforwarder/bin/splunk stop "
  RETVAL=\$?
}
splunk_restart() {
  echo Restarting Splunk...
  /bin/su splunk -c "/opt/splunkforwarder/bin/splunk restart "
  RETVAL=\$?
}
splunk_status() {
  echo Splunk status:
  /bin/su splunk -c "/opt/splunkforwarder/bin/splunk status --accept-license --answer-yes"
  RETVAL=\$?
}
case "\$1" in
  start)
    splunk_start
    ;;
  stop)
    splunk_stop
    ;;
  restart)
    splunk_restart
    ;;
  status)
    splunk_status
    ;;
  *)
    echo "Usage: splunkd {start|stop|restart|status}"
    exit 1
    ;;
esac
exit \$RETVAL
EOF
 
    chmod a+x /etc/init.d/splunkd
    chown -R splunk.splunk /opt/splunkforwarder/*
    cd ${home_path}
    service splunk stop
    chkconfig splunk off
    chkconfig --del splunk
    chkconfig --add splunkd
    service splunkd start
fi
 
cd ${home_path}
[ -f batch-logs ] || ln -s /opt/logs/${logs_path} batch-logs
 
cd /opt/logs/${logs_path}
[ -f config ] || ln -s /opt/expedia/${cgs_path}/config config
 
read -p $'\nEdit config.properties accordingly, if needed. Press a key now to edit. '
vim config/config.properties
 
read -p $'\nEdit wrapper config accordingly, if needed. Press a key now to edit. '
vim config/wrapper.conf
 
set +x
echo $'\nDone'
echo "Start cgs-batch with: service ${cgs_path} restart"
